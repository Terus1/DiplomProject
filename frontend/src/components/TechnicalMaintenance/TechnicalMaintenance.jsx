import './TechnicalMaintenance.css'
import {useEffect, useState} from "react";

function TechnicalMaintenance({user, cars, technicalMaintenances, error, typeOfMaintenances, serviceCompanies, fetchData}) {
    const [userTechnicalMaintenances, setUserTechnicalMaintenances] = useState([]);
    const [editTM, setEditTM] = useState(null) // –î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –¢–û
    const [updatedData, setUpdatedData] = useState({
        type_of_maintenance: {},
        organization_carried_out_maintenance: {},
        to_car: {},
        service_company: {},
    }); // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [isModalOpenForChangeTM, setIsModalOpenForChangeTM] = useState(false);    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥—É–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¢–û–û
    const [modalType, setModalType] = useState(""); // –¢–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const [selectedModel, setSelectedModel] = useState(""); // –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isModalOpenForModel, setIsModalOpenForModel] = useState(false);
    const [editMaintenance, setEditMaintenance] = useState(null); // –î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –º–∞—à–∏–Ω—ã
    const [descriptionSelectedModel, setDescriptionSelectedModel] = useState("")


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const openModal = (type, model) => {
        setModalType(type)
        setSelectedModel(model)
        setIsModalOpen(true);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeModal = () => {
        setIsModalOpen(false);
        setIsModalOpenForModel(false)
        setIsModalOpenForChangeTM(false);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const openEditModal = (tm) => {
        setEditTM(tm);  // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –¢–û
        setUpdatedData(tm); // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setIsModalOpenForChangeTM(true);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π –º–∞—à–∏–Ω—ã
    const openWindowForModel = (type, model, description) => {
        setModalType(type);
        setSelectedModel(model);
        setDescriptionSelectedModel(description);
        setIsModalOpenForModel(true);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¢–û
    const handleChange = (e) => {
        const { name, value } = e.target;

        setUpdatedData((prevData) => {
            // –î–ª—è –ø–æ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–æ–¥–µ–ª—è–º–∏ –¢–û
            if (["type_of_maintenance", "organization_carried_out_maintenance", "to_car", "service_company"].includes(name)) {
                // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ ID
                const selectedModel = (name === "type_of_maintenance" ? typeOfMaintenances :
                                       name === "organization_carried_out_maintenance" ? serviceCompanies :
                                       name === "to_car" ? cars :
                                       name === "service_company" ? serviceCompanies : [])
                                       .find(model => model.id === Number(value));

                return {
                    ...prevData,
                    [name]: selectedModel ? { id: selectedModel.id, name: selectedModel.name } : null
                };
            }

            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            return {
                ...prevData,
                [name]: value,
            };
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¢–û
    const updateTechnicalMaintenance = async () => {
        try {
            const token = localStorage.getItem('access_token');

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –∑–∞–º–µ–Ω—è—è –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Ö ID
            const dataToSend = {
                ...updatedData,
                type_of_maintenance: updatedData.type_of_maintenance || null,
                organization_carried_out_maintenance: updatedData.organization_carried_out_maintenance || null,
                to_car: updatedData.to_car || null,
                service_company: updatedData.service_company || null,
            };

            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: (dataToSend)", dataToSend);

            const response = await fetch(`http://127.0.0.1:8000/api/technical_maintenances/${editMaintenance.id}/`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                    'Accept': 'application/json',  // üëà –î–æ–±–∞–≤–∏–ª
                },
                body: JSON.stringify(dataToSend) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID –º–æ–¥–µ–ª–µ–π
            });

            console.log('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –¢–û ID', editMaintenance?.id);

            if (response.ok) {
                const responseData = await response.json();
                console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);

                await fetchData();
                closeModal();
                // window.location.reload();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¢–û', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –≤ –¢–û
    const updateTechnicalMaintenanceField = async (field, value, endpoint) => {
        try {
            const token = localStorage.getItem("access_token");

            const dataToSend = { [field]: value };
            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç", endpoint);

            const response = await fetch(endpoint, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`,
                },
                body: JSON.stringify(dataToSend),
            });

            if (response.ok) {
                const responseData = await response.json();
                console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);

                // üî• –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ –≤ updatedData, –∞ –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç!
                setUpdatedData((prevState) => ({
                    ...prevState,
                    [field]: value, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
                }));

                return responseData;
            } else {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¢–û: ${endpoint}`);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¢–û: ${endpoint}, –æ—à–∏–±–∫–∞ = ${error}`);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –º–æ–¥–µ–ª–∏
    const updateField = async (field, value, endpoint) => {
        try {
            console.log("‚è© updateField –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:", { field, value, endpoint });

            const token = localStorage.getItem("access_token");

            const dataToSend = { [field]: value };
            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç", endpoint);

            const response = await fetch(endpoint, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`,
                },
                body: JSON.stringify(dataToSend),
            });

            if (response.ok) {
                const responseData = await response.json();
                console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);

                // üî• –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ –≤ updatedData, –∞ –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç!
                setUpdatedData((prevState) => ({
                    ...prevState,
                    [field]: value, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
                }));

                return responseData;
            } else {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ${endpoint}`);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${endpoint}, –æ—à–∏–±–∫–∞ = ${error}`);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¢–û
    const updateTO = async () => {
        try {
            const token = localStorage.getItem('access_token');

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –∑–∞–º–µ–Ω—è—è –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Ö ID
            const dataToSend = {
                ...updatedData,
                type_of_maintenance: updatedData.type_of_maintenance || null,
                organization_carried_out_maintenance: updatedData.organization_carried_out_maintenance || null,
                to_car: updatedData.to_car || null,
                service_company: updatedData.service_company || null,
            };
            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: (dataToSend)", dataToSend);

            const response = await fetch(`http://127.0.0.1:8000/api/technical-maintenances/${editTM.id}/`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                    'Accept': 'application/json',  // üëà –î–æ–±–∞–≤–∏–ª
                },
                body: JSON.stringify(dataToSend) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID –º–æ–¥–µ–ª–µ–π
            });
            console.log('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –¢–û', editTM?.id)
            if (response.ok) {
                // alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                const responseData = await response.json();
                console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);
                // const responseText = await response.text()
                // console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (RAW)", responseText)
                await fetchData();

                closeModal();
                // window.location.reload();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¢–û', error);
        }
    };


    useEffect(() => {
        if (!user || !cars || !technicalMaintenances) return ;

        const userCarIds = cars
            .filter(car => car.client === user.id)
            .map(car => car.id)

        const filteredMaintenances = technicalMaintenances
            .filter(tm => userCarIds.includes(tm.to_car))

        setUserTechnicalMaintenances(filteredMaintenances);

        console.log('–¢–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', filteredMaintenances)
    }, [technicalMaintenances, user, cars]);

    useEffect(() => {
        if (technicalMaintenances && technicalMaintenances.length > 0) {
            const updatedTMData = technicalMaintenances.map(tm => ({
                ...tm,
                type_of_maintenance: tm.type_of_maintenance || null,
                organization_carried_out_maintenance: tm.organization_carried_out_maintenance || null,
                to_car: tm.to_car || null,
                service_company: tm.service_company || null,

            }));

            setUpdatedData(updatedTMData);
        }
        console.log('–î–∞–Ω–Ω—ã–µ –¢–û –∏–∑ TechnicalMaintenance', technicalMaintenances);
        // console.log('updatedData', updatedData)
    }, [technicalMaintenances]);


    return (
        <>
            <div className="results-container">
                {error && <p className="error-message">{error}</p>}

                <table className="table-results">
                    <thead>
                    <tr>
                        <th>‚Ññ –¢–û</th>
                        <th>–í–∏–¥ –¢–û</th>
                        <th>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¢–û</th>
                        <th>–ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å</th>
                        <th>‚Ññ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞</th>
                        <th>–î–∞—Ç–∞ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞</th>
                        <th>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–æ–≤–æ–¥–∏–≤—à–∞—è –¢–û</th>
                        <th>–ú–∞—à–∏–Ω–∞ (–ó–∞–≤. ‚Ññ)</th>
                        <th>–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è</th>
                    </tr>
                    </thead>
                    <tbody>
                    {userTechnicalMaintenances.map(tm => (
                        <tr key={tm.id}>
                            <td>{tm.id}
                                <button className={'change-info-about-tm'} onClick={() => openEditModal(tm)}>–ò–∑–º–µ–Ω–∏—Ç—å</button>
                            </td>
                            <td>{tm.type_of_maintenance_name}</td>
                            <td>{tm.date_of_maintenance}</td>
                            <td>{tm.to_operating_time}</td>
                            <td>{tm.order_number}</td>
                            <td>{tm.order_date}</td>
                            <td>{tm.organization_carried_out_maintenance_name}</td>
                            <td>{tm.to_car_name}</td>
                            <td>{tm.service_company_name}</td>
                        </tr>
                    ))}
                    </tbody>


                </table>
            </div>

            {isModalOpenForChangeTM && editTM && (<div className={'modal-overlay'}>
                <div className="modal">
                    <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û</h2>

                    {/* –í–∏–¥ –¢–û */}
                    <label>–í–∏–¥ –¢–û:</label>
                    <select
                        name="type_of_maintenance"
                        value={updatedData.type_of_maintenance || ""}
                        onChange={(e) => {
                            const selectedId = parseInt(e.target.value, 10);
                            const selectedModel = typeOfMaintenances.find(model => model.id === selectedId);

                            setUpdatedData(prevState => ({
                                ...prevState,
                                type_of_maintenance: selectedModel || {}
                            }));

                            if (selectedModel) {
                                updateField("type_of_maintenance", selectedModel.id, `http://127.0.0.1:8000/api/type_of_maintenances/${selectedModel.id}/`);
                            }
                        }}
                    >
                        {/* –ü–µ—Ä–≤–∞—è –æ–ø—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ */}
                        <option value="">–¢–µ–∫—É—â–∏–π –≤–∏–¥ –¢–û
                            - {updatedData.type_of_maintenance_name}</option>

                        {/* –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –∏ –≤ —Å–ø–∏—Å–∫–µ */}
                        {typeOfMaintenances
                            .filter(model => model.id !== updatedData.type_of_maintenance?.id) // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
                            .map(model => (
                                <option key={model.id} value={model.id}>
                                    {model.name}
                                </option>
                            ))}
                    </select>


                    {/* –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¢–û */}
                    <label>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¢–û:</label>
                    <input type="date" name="date_of_maintenance"
                           value={updatedData.date_of_maintenance || ""} onChange={handleChange}/>


                    {/* –ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å */}
                    <label>–ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å:</label>
                    <input type="text" name="to_operating_time"
                           value={updatedData.to_operating_time || ""} onChange={handleChange}/>

                    {/* ‚Ññ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞ */}
                    <label>‚Ññ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞:</label>
                    <input type="text" name="order_number"
                           value={updatedData.order_number || ""} onChange={handleChange}/>


                    <label>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ø—Ä–æ–≤–æ–¥–∏–≤—à–∞—è –¢–û:</label>
                    <select
                        name="organization_carried_out_maintenance"
                        value={updatedData.organization_carried_out_maintenance || ""}
                        onChange={(e) => {
                            const selectedId = parseInt(e.target.value, 10);
                            const selectedCompany = serviceCompanies.find(company => company.id === selectedId) || null;

                            console.log("–í—ã–±—Ä–∞–ª–∏ ID:", selectedId);
                            console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", selectedCompany);

                            setUpdatedData(prevState => ({
                                ...prevState,
                                organization_carried_out_maintenance: selectedCompany  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å ID –∏ –∏–º–µ–Ω–µ–º
                            }));

                            if (selectedCompany) {
                                console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º updateField —Å ID:", selectedCompany.id);
                                updateField("organization_carried_out_maintenance", selectedCompany.id, `http://127.0.0.1:8000/api/service-companies/${selectedCompany.id}/`);
                            }
                        }}
                    >
                        <option value="">
                            –¢–µ–∫—É—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏–≤—à–∞—è –¢–û
                            - {updatedData.organization_carried_out_maintenance_name || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"}
                        </option>
                        {serviceCompanies.map(company => (
                            <option key={company.id} value={company.id}>{company.name}</option>
                        ))}
                    </select>


                    <label>–ú–∞—à–∏–Ω–∞ (–ó–∞–≤. ‚Ññ):</label>
                    <select
                        name="to_car"
                        value={updatedData.to_car || ""}
                        onChange={(e) => {
                            const selectedId = parseInt(e.target.value, 10);
                            const selectedModel = cars.find(car => car.id === selectedId) || null;

                            console.log("–í—ã–±—Ä–∞–ª–∏ ID:", selectedId);
                            console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", selectedModel);

                            setUpdatedData(prevState => ({
                                ...prevState,
                                to_car: selectedId || null
                            }));

                            if (selectedModel) {
                                console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º updateField —Å ID:", selectedModel.id);
                                updateField("to_car", selectedModel.id, `http://127.0.0.1:8000/api/cars/${selectedModel.id}/`);
                            }
                        }}
                    >
                        <option value="">–¢–µ–∫—É—â–∞—è –º–∞—à–∏–Ω–∞ (–ó–∞–≤. ‚Ññ)
                            - {updatedData.to_car_name}</option>
                        {cars.map(company => (
                            <option key={company.id} value={company.id}>{company.machines_factory_number}</option>
                        ))}
                    </select>


                    <label>–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è:</label>
                    <select
                        name="service_company"
                        value={updatedData.service_company?.id || ""}
                        onChange={(e) => {
                            const selectedId = parseInt(e.target.value, 10);
                            const selectedModel = serviceCompanies.find(company => company.id === selectedId) || null;

                            console.log("–í—ã–±—Ä–∞–ª–∏ ID:", selectedId);
                            console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", selectedModel);

                            setUpdatedData(prevState => ({
                                ...prevState,
                                service_company: selectedId || null
                            }));

                            if (selectedModel) {
                                console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º updateField —Å ID:", selectedModel.id);
                                updateField("service_company", selectedModel.id, `http://127.0.0.1:8000/api/service-companies/${selectedModel.id}/`);
                            }
                        }}
                    >
                        <option value="">–¢–µ–∫—É—â–∞—è —Å–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
                            - {updatedData.service_company_name}</option>
                        {serviceCompanies.map(company => (
                            <option key={company.id} value={company.id}>{company.name}</option>
                        ))}
                    </select>

                    <button onClick={updateTO}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button className={'close-btn'} onClick={closeModal}>–û—Ç–º–µ–Ω–∞</button>

                </div>

            </div>)}
        </>
    )
}

export default TechnicalMaintenance;
