import './Complaint.css'
import {useEffect, useState} from "react";

function Complaint({user, cars, complaints, groups, failureNodes, recoveryMethods, serviceCompanies, fetchData, error}) {
    const [userComplaints, setUserComplaints] = useState([]);
    const [modalType, setModalType] = useState(""); // –¢–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const [selectedModel, setSelectedModel] = useState(""); // –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isModalOpenForModel, setIsModalOpenForModel] = useState(false);
    const [isModalOpenForChangeComplaint, setIsModalOpenForChangeComplaint] = useState(false);    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥—É–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¢–û–û
    const [editComplaint, setEditComplaint] = useState(null) // –î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –¢–û
    const [updatedData, setUpdatedData] = useState({
        failure_node: {},
        recovery_method: {},
        complaint_car: {},
        service_company: {},
    }); // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [descriptionSelectedModel, setDescriptionSelectedModel] = useState("")


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const openModal = (type, model) => {
        setModalType(type)
        setSelectedModel(model)
        setIsModalOpen(true);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeModal = () => {
        setIsModalOpen(false);
        setIsModalOpenForModel(false)
        setIsModalOpenForChangeComplaint(false);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const openEditModal = (tm) => {
        setEditComplaint(tm);  // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –¢–û
        setUpdatedData(tm); // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setIsModalOpenForChangeComplaint(true);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π –º–∞—à–∏–Ω—ã
    const openWindowForModel = (type, model, description) => {
        setModalType(type);
        setSelectedModel(model);
        setDescriptionSelectedModel(description);
        setIsModalOpenForModel(true);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏
    const handleChange = (e) => {
        const { name, value } = e.target;

        setUpdatedData((prevData) => {
            // –î–ª—è –ø–æ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–æ–¥–µ–ª—è–º–∏ –¢–û
            if (["failure_node", "recovery_method", "complaint_car", "service_company"].includes(name)) {
                // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ ID
                const selectedModel = (name === "failure_node" ? failureNodes :
                    name === "recovery_method" ? recoveryMethods :
                        name === "complaint_car" ? cars :
                            name === "service_company" ? serviceCompanies : [])
                    .find(model => model.id === Number(value));

                return {
                    ...prevData,
                    [name]: selectedModel ? { id: selectedModel.id, name: selectedModel.name } : null
                };
            }

            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            return {
                ...prevData,
                [name]: value,
            };
        });
    };

    // // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏
    // const updateComplaint = async () => {
    //     try {
    //         const token = localStorage.getItem('access_token');
    //
    //         // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –∑–∞–º–µ–Ω—è—è –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Ö ID
    //         const dataToSend = {
    //             ...updatedData,
    //             failure_node: updatedData.failure_node || null,
    //             recovery_method: updatedData.recovery_method || null,
    //             complaint_car: updatedData.complaint_car || null,
    //             service_company: updatedData.service_company || null,
    //         };
    //
    //         console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: (dataToSend)", dataToSend);
    //
    //         const response = await fetch(`http://127.0.0.1:8000/api/complaints/${editComplaint.id}/`, {
    //             method: 'PATCH',
    //             headers: {
    //                 'Content-Type': 'application/json',
    //                 'Authorization': `Bearer ${token}`,
    //                 'Accept': 'application/json',  // üëà –î–æ–±–∞–≤–∏–ª
    //             },
    //             body: JSON.stringify(dataToSend) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID –º–æ–¥–µ–ª–µ–π
    //         });
    //
    //         console.log('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è ID', editComplaint?.id);
    //
    //         if (response.ok) {
    //             const responseData = await response.json();
    //             console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);
    //
    //             await fetchData();
    //             closeModal();
    //             // window.location.reload();
    //         } else {
    //             alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    //         }
    //     } catch (error) {
    //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏', error);
    //     }
    // };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –≤ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏
    const updateComplaintField = async (field, value, endpoint) => {
        try {
            const token = localStorage.getItem("access_token");

            const dataToSend = { [field]: value };
            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç", endpoint);

            const response = await fetch(endpoint, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`,
                },
                body: JSON.stringify(dataToSend),
            });

            if (response.ok) {
                const responseData = await response.json();
                console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);

                // üî• –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ –≤ updatedData, –∞ –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç!
                setUpdatedData((prevState) => ({
                    ...prevState,
                    [field]: value, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
                }));

                return responseData;
            } else {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏: ${endpoint}`);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏: ${endpoint}, –æ—à–∏–±–∫–∞ = ${error}`);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –º–æ–¥–µ–ª–∏
    const updateField = async (field, value, endpoint) => {
        try {
            const token = localStorage.getItem("access_token");

            const dataToSend = { [field]: value };
            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç", endpoint);

            const response = await fetch(endpoint, {
                method: "PATCH",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`,
                },
                body: JSON.stringify(dataToSend),
            });

            if (response.ok) {
                const responseData = await response.json();
                console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);

                // üî• –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ –≤ updatedData, –∞ –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç!
                setUpdatedData((prevState) => ({
                    ...prevState,
                    [field]: value, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
                }));

                return responseData;
            } else {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ${endpoint}`);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${endpoint}, –æ—à–∏–±–∫–∞ = ${error}`);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¢–û
    const updateComplaint = async () => {
        try {
            const token = localStorage.getItem('access_token');
            // console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:");
            // console.log("failure_node:", updatedData.failure_node);
            // console.log("recovery_method:", updatedData.recovery_method);
            // console.log("complaint_car:", updatedData.complaint_car);
            // console.log("service_company:", updatedData.service_company);
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –∑–∞–º–µ–Ω—è—è –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Ö ID
            const dataToSend = {
                ...updatedData,
                failure_node: updatedData.failure_node?.id || null,
                recovery_method: updatedData.recovery_method?.id || null,
                complaint_car: updatedData.complaint_car?.id || null,
                service_company: updatedData.service_company?.id || null,
            };
            // console.log("–§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", JSON.stringify(dataToSend, null, 2));


            const response = await fetch(`http://127.0.0.1:8000/api/complaints/${editComplaint.id}/`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                    'Accept': 'application/json',  // üëà –î–æ–±–∞–≤–∏–ª
                },
                body: JSON.stringify(dataToSend) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID –º–æ–¥–µ–ª–µ–π
            });
            console.log('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è', editComplaint?.id)
            if (response.ok) {
                // alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                const responseData = await response.json();
                console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);
                // const responseText = await response.text()
                // console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (RAW)", responseText)
                await fetchData();

                closeModal();
                // window.location.reload();
            } else {
                const errorText = await response.text();
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", errorText);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏', error);
        }
    };

    useEffect(() => {
        if (!user || !cars || !complaints) return;

        const userCarIds = cars
            .filter(car => car.client === user.id)
            .map(car => car.id)

        const filteredComplaints = complaints
            .filter(complaint => userCarIds.includes(complaint.complaint_car))

        setUserComplaints(filteredComplaints)
        console.log('–†–µ–∫–ª–∞–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', filteredComplaints)
        // console.log('–°–ø–æ—Å–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', recoveryMethods, '–ú–∞—à–∏–Ω—ã:', cars, '–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', serviceCompanies)
    }, [complaints, user, cars, recoveryMethods, serviceCompanies]);


    return (
        <>
            <div className="results-container">
                {error && <p className="error-message">{error}</p>}

                <table className="table-results">
                    <thead>
                    <tr>
                        <th>‚Ññ –†–µ–∫–ª–∞–º–∞—Ü–∏–∏</th>
                        <th>–î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞</th>
                        <th>–ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å</th>
                        <th>–£–∑–µ–ª –æ—Ç–∫–∞–∑–∞</th>
                        <th>–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞</th>
                        <th>–°–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</th>
                        <th>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–ø–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏</th>
                        <th>–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Ç–µ—Ö–Ω–∏–∫–∏</th>
                        <th>–î–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</th>
                        <th>–ú–∞—à–∏–Ω–∞ (–ó–∞–≤. ‚Ññ)</th>
                        <th>–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è</th>
                    </tr>
                    </thead>
                    <tbody>
                    {userComplaints.map(complaint => (

                        <tr key={complaint.id}>
                            <td>{complaint.id}
                                <button className={'change-info-about-complaint'}
                                        onClick={() => openEditModal(complaint)}>–ò–∑–º–µ–Ω–∏—Ç—å
                                </button>
                            </td>
                            <td>{complaint.date_of_refusal}
                                {(groups[0]['name'] === 'manager') ?
                                    (<button className="change-info-about-car"
                                             onClick={() => openEditModal(complaint)}>–ò–∑–º–µ–Ω–∏—Ç—å
                                    </button>) : <></>}</td>
                            <td>{complaint.complaint_operating_time}</td>
                            <td>{complaint.failure_node_name}</td>
                            <td>{complaint.description_of_failure}</td>
                            <td>{complaint.recovery_method_name}</td>
                            <td>{complaint.used_spare_parts}</td>
                            <td>{complaint.equipment_downtime}</td>
                            <td>{complaint.date_of_restoration}</td>
                            <td>{complaint.complaint_car_name}</td>
                            <td>{complaint.service_company_name}</td>
                        </tr>
                    ))}
                    </tbody>


                </table>
            </div>

            {isModalOpenForChangeComplaint && editComplaint && (<div className={'modal-overlay'}>
                <div className="modal">
                    <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–µ–∫–ª–∞–º–∞—Ü–∏–∏</h2>

                    {/* –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¢–û */}
                    <label>–î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞:</label>
                    <input type="date" name="date_of_refusal"
                           value={updatedData.date_of_refusal || ""} onChange={handleChange}/>


                    {/* –ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å */}
                    <label>–ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å:</label>
                    <input type="text" name="complaint_operating_time"
                           value={updatedData.complaint_operating_time || ""} onChange={handleChange}/>


                    <label>–£–∑–µ–ª –æ—Ç–∫–∞–∑–∞:</label>
                    <select
                        name="failure_node"
                        value={updatedData.failure_node?.id || ""}
                        onChange={(e) => {
                            const selectedId = parseInt(e.target.value, 10);
                            const selectedModel = failureNodes.find(node => node.id === selectedId) || null;

                            console.log("–í—ã–±—Ä–∞–ª–∏ failure_node ID:", selectedId);
                            console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", selectedModel);

                            setUpdatedData(prevState => ({
                                ...prevState,
                                failure_node: selectedModel  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å ID –∏ –∏–º–µ–Ω–µ–º
                            }));

                            if (selectedModel) {
                                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º failure_node —Å ID', selectedModel.id);
                                updateField('failure_node', selectedModel.id, `http://127.0.0.1:8000/api/failure_nodes/${selectedModel.id}/`)
                        }}}

                    >
                        <option value="">
                            –¢–µ–∫—É—â–∏–π —É–∑–µ–ª –æ—Ç–∫–∞–∑–∞
                            - {updatedData.failure_node_name || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"}
                        </option>
                        {failureNodes.map(node => (
                            <option key={node.id} value={node.id}>{node.name}</option>
                        ))}
                    </select>

                    {/* –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ */}
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞:</label>
                    <input type="text" name="description_of_failure"
                           value={updatedData.description_of_failure || ""} onChange={handleChange}/>


                    <label>–°–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</label>
                    <select
                        name="recovery_method"
                        value={updatedData.recovery_method?.id || ""}
                        onChange={(e) => {
                            const selectedId = parseInt(e.target.value, 10);
                            const selectedModel = recoveryMethods.find(method => method.id === selectedId) || null;

                            console.log("–í—ã–±—Ä–∞–ª–∏ recovery_method ID:", selectedId);
                            console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", selectedModel);

                            setUpdatedData(prevState => ({
                                ...prevState,
                                recovery_method: selectedModel  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å ID –∏ –∏–º–µ–Ω–µ–º
                            }));

                            if (selectedModel) {
                                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º recovery_method —Å ID:', selectedModel.id);
                                updateField('recovery_method', selectedModel.id,  `http://127.0.0.1:8000/api/recovery_methods/${selectedModel.id}/`)
                            }
                        }}
                    >
                        <option value="">
                            –¢–µ–∫—É—â–∏–π —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                            - {updatedData.recovery_method_name || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"}
                        </option>
                        {recoveryMethods.map(method => (
                            <option key={method.id} value={method.id}>{method.name}</option>
                        ))}
                    </select>


                    {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–ø–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏ */}
                    <label>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–ø–∞—Å–Ω—ã–µ —á–∞—Å—Ç–∏:</label>
                    <input type="text" name="used_spare_parts"
                           value={updatedData.used_spare_parts || ""} onChange={handleChange}/>


                    {/* –î–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è */}
                    <label>–î–∞—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</label>
                    <input type="date" name="date_of_restoration"
                           value={updatedData.date_of_restoration || ""} onChange={handleChange}/>


                    {/* –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Ç–µ—Ö–Ω–∏–∫–∏ */}
                    <label>–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Ç–µ—Ö–Ω–∏–∫–∏:</label>
                    <input type="date" name="equipment_downtime"
                           value={updatedData.equipment_downtime || ""} onChange={handleChange}/>


                    <label>–ú–∞—à–∏–Ω–∞ (–ó–∞–≤. ‚Ññ):</label>
                    <select
                        name="complaint_car"
                        value={updatedData.complaint_car?.id || ""}
                        onChange={(e) => {
                            const selectedId = parseInt(e.target.value, 10);
                            const selectedModel = cars.find(car => car.id === selectedId) || null;

                            console.log("–í—ã–±—Ä–∞–ª–∏ complaint_car ID:", selectedId);
                            console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", selectedModel);

                            setUpdatedData(prevState => ({
                                ...prevState,
                                complaint_car: selectedModel  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å ID –∏ –∏–º–µ–Ω–µ–º
                            }));

                            if (selectedModel) {
                                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º complaint_car —Å ID:', selectedModel.id);
                                updateField('complaint_car', selectedModel.id,  `http://127.0.0.1:8000/api/cars/${selectedModel.id}/`)
                            }

                        }}
                    >
                        <option value="">
                            –¢–µ–∫—É—â–∞—è –º–∞—à–∏–Ω–∞
                            - {updatedData.complaint_car_name || "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"}
                        </option>
                        {cars.map(car => (
                            <option key={car.id} value={car.id}>{car.machines_factory_number}</option>
                        ))}
                    </select>


                    <label>–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è:</label>
                    <select
                        name="service_company"
                        value={updatedData.service_company?.id || ""}
                        onChange={(e) => {
                            const selectedId = parseInt(e.target.value, 10);
                            const selectedModel = serviceCompanies.find(company => company.id === selectedId) || null;

                            console.log("–í—ã–±—Ä–∞–ª–∏ service_company ID:", selectedId);
                            console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", selectedModel);

                            setUpdatedData(prevState => ({
                                ...prevState,
                                service_company: selectedModel
                            }));

                            if (selectedModel) {
                                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º service_company —Å ID:', selectedModel.id);
                                updateField('service_company', selectedModel.id, `http://127.0.0.1:8000/api/service-companies/${selectedModel.id}/`)
                            }
                            
                        }}
                    >
                        <option value="">–¢–µ–∫—É—â–∞—è —Å–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
                            - {updatedData.service_company_name}</option>
                        {serviceCompanies.map(company => (
                            <option key={company.id} value={company.id}>{company.name}</option>
                        ))}
                    </select>

                    <button onClick={updateComplaint}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button className={'close-btn'} onClick={closeModal}>–û—Ç–º–µ–Ω–∞</button>

                </div>

            </div>)}
        </>
    )
}


export default Complaint;
