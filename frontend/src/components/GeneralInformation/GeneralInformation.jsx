import './GeneralInformation.css'
import {useEffect, useState} from "react";
import {options} from "axios";


function GeneralInformation({cars, setCars, error, user, techniques, engines, transmissions, drivingBridges, controlledBridges,
                                clients, serviceCompanies, fetchData}) {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isModalOpenForModel, setIsModalOpenForModel] = useState(false);
    const [modalType, setModalType] = useState(""); // –¢–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const [selectedModel, setSelectedModel] = useState(""); // –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    const [descriptionSelectedModel, setDescriptionSelectedModel] = useState(""); // –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

    const [editCar, setEditCar] = useState(null); // –î–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –º–∞—à–∏–Ω—ã
    const [updatedData, setUpdatedData] = useState({
        model_of_technique: {},
        engine_model: {},
        transmission_model: {},
        driving_bridge_model: {},
        controlled_bridge_model: {},
        service_company: {},
        client: {},
    }); // –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [isModalOpenForChangeCar, setIsModalOpenForChangeCar] = useState(false);





    useEffect(() => {
        if (cars && cars.length > 0) {
            const firstCar = cars[0];

            setUpdatedData(prevState => {
                const newData = {
                    ...firstCar,
                    model_of_technique: firstCar.model_of_technique_details?.id || {},
                    engine_model: firstCar.engine_model_details?.id || {},
                    transmission_model: firstCar.transmission_model_details?.id || {},
                    driving_bridge_model: firstCar.driving_bridge_model_details?.id || {},
                    controlled_bridge_model: firstCar.controlled_bridge_model_details?.id || {},
                    service_company: firstCar.service_company_details?.id || {},
                };

                console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ updatedData:", newData);
                return newData;
            });
        }
        console.log('cars', cars)
        console.log('techniques', techniques)
        console.log('engines', engines)
    }, [cars, techniques, engines]);


    useEffect(() => {
        if (updatedData.id) {
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ updatedData:', updatedData);
        }
    }, [updatedData]);  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ updatedData –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const openEditModal = (car) => {
        setEditCar(car);
        setUpdatedData(car); // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setIsModalOpenForChangeCar(true);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö
    // const handleChange = (e) => {
    //     setUpdatedData({...updatedData, [e.target.name]: e.target.value})
    // }

    // const handleChange = (e) => {
    //     const { name, value } = e.target;
    //
    //     setUpdatedData((prevData) => {
    //         if (name.includes("model")) {
    //             // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–æ–¥–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    //             return {
    //                 ...prevData,
    //                 [name]: {
    //                     ...prevData[name],
    //                     name: value, // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ name –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞
    //                 },
    //             };
    //         }
    //
    //         return {
    //             ...prevData,
    //             [name]: value,
    //         };
    //     });
    // };

    const handleChange = (e) => {
        const { name, value } = e.target;

        setUpdatedData((prevData) => {
            // –î–ª—è –ø–æ–ª–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–æ–¥–µ–ª—è–º–∏ —Ç–µ—Ö–Ω–∏–∫–∏
            if (["model_of_technique", "engine_model", "transmission_model", "driving_bridge_model", "controlled_bridge_model", "service_company"].includes(name)) {
                // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ ID
                const selectedModel = (name === "model_of_technique" ? techniques :
                                       name === "engine_model" ? engines :
                                       name === "transmission_model" ? transmissions :
                                       name === "driving_bridge_model" ? drivingBridges :
                                       name === "controlled_bridge_model" ? controlledBridges :
                                       name === "service_company" ? serviceCompanies : [])
                                       .find(model => model.id === Number(value));

                return {
                    ...prevData,
                    [name]: selectedModel ? { id: selectedModel.id, name: selectedModel.name } : null
                };
            }

            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            return {
                ...prevData,
                [name]: value,
            };
        });
    };






    // const updateCar = async () => {
    //     try {
    //         const token = localStorage.getItem('access_token')
    //
    //         const response = await fetch(`http://127.0.0.1:8000/api/cars/${editCar.id}/`, {
    //             method: 'PATCH',
    //             headers: {
    //                 'Content-Type': 'application/json',
    //                 'Authorization': `Bearer ${token}`
    //             },
    //             body: JSON.stringify(updatedData)
    //         });
    //
    //         if (response.ok) {
    //             alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    //             closeModal();
    //             window.location.reload();
    //         } else {
    //             alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
    //         }
    //     } catch (error) {
    //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã', error)
    //     }
    // }

    const updateCar = async () => {
        try {
            const token = localStorage.getItem('access_token');

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –∑–∞–º–µ–Ω—è—è –æ–±—ä–µ–∫—Ç—ã –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Ö ID
            const dataToSend = {
                ...updatedData,
                model_of_technique: updatedData.model_of_technique ? Number(updatedData.model_of_technique.id) : null,
                engine_model: updatedData.engine_model?.id || null,
                transmission_model: updatedData.transmission_model?.id || null,
                driving_bridge_model: updatedData.driving_bridge_model?.id || null,
                controlled_bridge_model: updatedData.controlled_bridge_model?.id || null,
                service_company: updatedData.service_company?.id || null,
            };
            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: (dataToSend)", dataToSend);
            console.log('updatedData', updatedData)
            console.log("model_of_technique –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", updatedData.model_of_technique);


            const response = await fetch(`http://127.0.0.1:8000/api/cars/${editCar.id}/`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                    'Accept': 'application/json',  // üëà –î–æ–±–∞–≤–∏–ª
                },
                body: JSON.stringify(dataToSend) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID –º–æ–¥–µ–ª–µ–π
            });
            console.log('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å ID', editCar?.id)
            if (response.ok) {
                // alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                const responseData = await response.json();
                console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);
                // const responseText = await response.text()
                // console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (RAW)", responseText)
                await fetchData();

                closeModal();
                // window.location.reload();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã', error);
        }
    };


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π –º–∞—à–∏–Ω—ã
    const openWindowForModel = (type, model, description) => {
        setModalType(type);
        setSelectedModel(model);
        setDescriptionSelectedModel(description);
        setIsModalOpenForModel(true);
    }

    const openModal = (type, model) => {
        setModalType(type)
        setSelectedModel(model)
        setIsModalOpen(true);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const closeModal = () => {
        setIsModalOpen(false);
        setIsModalOpenForModel(false)
        setIsModalOpenForChangeCar(false);
    }


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –º–æ–¥–µ–ª–∏
    const updateField = async (field, value, endpoint) => {
        try {
            const token = localStorage.getItem('access_token');

            const dataToSend = { [field]: value};
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç', endpoint);

            const response = await fetch(endpoint, {
                method: 'PATCH',
                headers: {
                    'Content-type': 'application/json',
                    'Authorization': `Bearer ${token}`,

                },
                body: JSON.stringify(dataToSend)
            });

            if (response.ok) {
                const responseData = await response.json();
                console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞', endpoint, '=', responseData);
                return responseData;
            } else {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint}`);
            }

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ ${endpoint}, –æ—à–∏–±–∫–∞ = ${error}`)
        }
    }

    return (
        <>
            <div className="results-container">
                {error && <p className="error-message">{error}</p>}

                <table className="table-results">
                    <thead>
                    <tr>
                        <th>‚Ññ –ø/–ø</th>
                        <th>–ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏</th>
                        <th>–ó–∞–≤. ‚Ññ –º–∞—à–∏–Ω—ã</th>
                        <th>–ú–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è</th>
                        <th>–ó–∞–≤. ‚Ññ –¥–≤–∏–≥–∞—Ç–µ–ª—è</th>
                        <th>–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å, –∞—Ä—Ç–∏–∫—É–ª)</th>
                        <th>–ó–∞–≤. ‚Ññ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏</th>
                        <th>–ú–æ–¥–µ–ª—å –≤–µ–¥—É—â–µ–≥–æ –º–æ—Å—Ç–∞</th>
                        <th>–ó–∞–≤. ‚Ññ –≤–µ–¥—É—â–µ–≥–æ –º–æ—Å—Ç–∞</th>
                        <th>–ú–æ–¥–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –º–æ—Å—Ç–∞</th>
                        <th>–ó–∞–≤. ‚Ññ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –º–æ—Å—Ç–∞</th>
                        <th>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ —Å –∑–∞–≤–æ–¥–∞</th>
                        <th>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</th>
                        <th>–ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å (–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å)</th>
                        <th>–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤–∫–∏ (—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏)</th>
                        <th>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ (–¥–æ–ø. –æ–ø—Ü–∏–∏)</th>
                        <th>–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è</th>
                    </tr>
                    </thead>
                    <tbody>
                    {cars.length > 0 ? (
                        cars.map((car, index) => (
                            (car.client_details === user.nickname ? (<tr key={car.id}>
                                <td>–ú–∞—à–∏–Ω–∞ ‚Ññ {index + 1} <br/>
                                    <button className="change-info-about-car"
                                            onClick={() => openEditModal(car)}>–ò–∑–º–µ–Ω–∏—Ç—å
                                    </button>
                                </td>

                                {/* –ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏ */}
                                <td>
                                    <button className="button-info"
                                            onClick={() => openWindowForModel('–¢–µ—Ö–Ω–∏–∫–∞', car.model_of_technique_details?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ', car.model_of_technique_details?.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}>
                                        <span
                                            className={'object-of-car'}>{car.model_of_technique_details?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                                    </button>
                                </td>


                                {/* –ó–∞–≤. ‚Ññ –º–∞—à–∏–Ω—ã */}
                                <td>{car.machines_factory_number || "‚Äî"}</td>

                                {/* –ú–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è */}
                                <td>{car.engine_model_details?.name || "‚Äî"}</td>

                                {/* –ó–∞–≤. ‚Ññ –¥–≤–∏–≥–∞—Ç–µ–ª—è */}
                                <td>{car.engine_serial_number || "‚Äî"}</td>

                                {/* –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è */}
                                <td>{car.transmission_model_details?.name || "‚Äî"}</td>

                                {/* –ó–∞–≤. ‚Ññ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏ */}
                                <td>{car.factory_number_of_transmission || "‚Äî"}</td>

                                {/* –í–µ–¥—É—â–∏–π –º–æ—Å—Ç */}
                                <td>{car.driving_bridge_model_details?.name || "‚Äî"}</td>

                                {/* –ó–∞–≤. ‚Ññ –≤–µ–¥—É—â–µ–≥–æ –º–æ—Å—Ç–∞ */}
                                <td>{car.factory_number_of_drive_axle || "‚Äî"}</td>

                                {/* –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –º–æ—Å—Ç */}
                                <td>{car.controlled_bridge_model_details?.name || "‚Äî"}</td>

                                {/* –ó–∞–≤. ‚Ññ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –º–æ—Å—Ç–∞ */}
                                <td>{car.factory_number_of_controlled_bridge || "‚Äî"}</td>

                                {/* –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ */}
                                <td>{car.date_of_shipment_from_the_factory || "‚Äî"}</td>

                                {/* –ü–æ–∫—É–ø–∞—Ç–µ–ª—å */}
                                <td>{car.client_details || "‚Äî"}</td>

                                {/* –ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å */}
                                <td>{car.recipient || "‚Äî"}</td>

                                {/* –ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤–∫–∏ */}
                                <td>{car.delivery_address || "‚Äî"}</td>

                                {/* –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è */}
                                <td>{car.equipment || "‚Äî"}</td>

                                {/* –°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è */}
                                <td>{car.service_company_details || "‚Äî"}</td>
                            </tr>) : (<></>))

                        ))
                    ) : (
                        <tr>
                            <td colSpan="17">–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç</td>
                        </tr>
                    )}
                    </tbody>


                </table>
            </div>

            {isModalOpen && (
                    <div className={'modal-overlay'}>
                        <div className="modal">
                            <p className={'model'}>{modalType}: <br/><span
                                className={'name-of-model'}>{selectedModel}</span></p>
                            {/*<p>–û–ø–∏—Å–∞–Ω–∏–µ: {descriptionSelectedModel}</p>*/}
                            <button className={'close-btn'} onClick={closeModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    </div>
                )
                || isModalOpenForModel && (
                    <div className={'modal-overlay'}>
                        <div className="modal">
                            <p className={'model'}>{modalType}: <br/><span
                                className={'name-of-model'}>{selectedModel}</span></p>
                            <p>–û–ø–∏—Å–∞–Ω–∏–µ: {descriptionSelectedModel}</p>
                            <button className={'close-btn'} onClick={closeModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    </div>
                ) || isModalOpenForChangeCar && editCar && (
                    <div className={'modal-overlay'}>
                        <div className="modal">
                            <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã</h2>

                            {/* –ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏ */}
                            <label>–ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏:</label>
                            <select
                                name="model_of_technique"
                                value={updatedData.model_of_technique?.id || ""}
                                onChange={(e) => {
                                    const selectedId = parseInt(e.target.value, 10);
                                    const selectedModel = techniques.find(model => model.id === selectedId);

                                    setUpdatedData(prevState => ({
                                        ...prevState,
                                        model_of_technique: selectedModel, // –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
                                    }));

                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –æ–±—ä–µ–∫—Ç, –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                                    if (selectedModel) {
                                        updateField("model_of_technique", selectedModel, `http://127.0.0.1:8000/api/techniques/${selectedModel.id}/`);
                                    }
                                }}
                            >
                                <option value="">{updatedData.model_of_technique?.name || "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"}</option>
                                {techniques.map(model => (
                                    <option key={model.id} value={model.id}>{model.name}</option>
                                ))}
                            </select>


                            <label>–ó–∞–≤. ‚Ññ –º–∞—à–∏–Ω—ã:</label>
                            <input type="text" name="machines_factory_number"
                                   value={updatedData.machines_factory_number || ""} onChange={handleChange}/>

                            <label>–ú–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:</label>
                            <select
                                name="engine_model"
                                value={updatedData.engine_model?.id || ""}
                                onChange={(e) => {
                                    const selectedId = parseInt(e.target.value, 10);
                                    const selectedModel = engines.find(model => model.id === selectedId)
                                    setUpdatedData(prevState => ({
                                        ...prevState,
                                        engine_model: selectedModel
                                    }));

                                    if (selectedModel) {
                                        updateField('engine_model', selectedModel, `http://127.0.0.1:8000/api/engines/${selectedModel.id}/`)
                                    }
                                }}
                            >
                                {/*<option value="">{updatedData.engine_model?.name || "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"}</option>*/}
                                {engines.map(model => (
                                    <option key={model.id} value={model.id}>{model.name}</option>
                                ))}
                            </select>

                            <label>–ó–∞–≤. ‚Ññ –¥–≤–∏–≥–∞—Ç–µ–ª—è:</label>
                            <input type="text" name="engine_serial_number"
                                   value={updatedData.engine_serial_number || ""} onChange={handleChange}/>

                            <label>–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏:</label>
                            <input type="text" name="transmission_model"
                                   value={updatedData.transmission_model?.name || ""} onChange={handleChange}/>


                            <label>–ó–∞–≤. ‚Ññ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏:</label>
                            <input type="text" name="factory_number_of_transmission"
                                   value={updatedData.factory_number_of_transmission || ""} onChange={handleChange}/>

                            <label>–ú–æ–¥–µ–ª—å –≤–µ–¥—É—â–µ–≥–æ –º–æ—Å—Ç–∞:</label>
                            <input type="text" name="driving_bridge_model"
                                   value={updatedData.driving_bridge_model?.name || ""} onChange={handleChange}/>

                            <label>–ó–∞–≤. ‚Ññ –≤–µ–¥—É—â–µ–≥–æ –º–æ—Å—Ç–∞:</label>
                            <input type="text" name="factory_number_of_drive_axle"
                                   value={updatedData.factory_number_of_drive_axle || ""} onChange={handleChange}/>

                            <label>–ú–æ–¥–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –º–æ—Å—Ç–∞:</label>
                            <input type="text" name="controlled_bridge_model"
                                   value={updatedData.controlled_bridge_model?.name || ""} onChange={handleChange}/>

                            <label>–ó–∞–≤. ‚Ññ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –º–æ—Å—Ç–∞:</label>
                            <input type="text" name="factory_number_of_controlled_bridge"
                                   value={updatedData.factory_number_of_controlled_bridge || ""}
                                   onChange={handleChange}/>

                            <label>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ —Å –∑–∞–≤–æ–¥–∞:</label>
                            <input type="date" name="date_of_shipment_from_the_factory"
                                   value={updatedData.date_of_shipment_from_the_factory || ""} onChange={handleChange}/>

                            <label>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</label>
                            <input type="text" name="client" value={updatedData.client || ""} onChange={handleChange}/>

                            <label>–ì—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—å:</label>
                            <input type="text" name="recipient" value={updatedData.recipient || ""}
                                   onChange={handleChange}/>

                            <label>–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤–∫–∏:</label>
                            <input type="text" name="delivery_address" value={updatedData.delivery_address || ""}
                                   onChange={handleChange}/>

                            <label>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:</label>
                            <input type="text" name="equipment" value={updatedData.equipment || ""}
                                   onChange={handleChange}/>

                            <label>–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è:</label>
                            <select
                                name="service_company"
                                value={updatedData.service_company?.id || ""}
                                onChange={(e) => {
                                    const selectedId = parseInt(e.target.value, 10);
                                    setUpdatedData(prevState => ({
                                        ...prevState,
                                        service_company: selectedId || null
                                    }));
                                }}
                            >
                                <option value="">{updatedData.service_company?.name || "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é"}</option>
                                {serviceCompanies.map(company => (
                                    <option key={company.id} value={company.id}>{company.name}</option>
                                ))}
                            </select>

                            <button onClick={updateCar}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            <button className={'close-btn'} onClick={closeModal}>–û—Ç–º–µ–Ω–∞</button>

                        </div>

                    </div>
                )}
        </>
    )
}


export default GeneralInformation;
